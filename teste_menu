#include "raylib.h"

#define MAX_OPTIONS 4

typedef enum {
    MENU = 0,
    JOGO,
    SAIR
} GameScreen;

int main(void) {
    const int screenWidth = 800;
    const int screenHeight = 420;
    InitWindow(screenWidth, screenHeight, "CasteloVania");

    int selectedOption = 0;
    GameScreen currentScreen = MENU;
    const char *menuOptions[MAX_OPTIONS] = { "Iniciar", "Instruções", "Ranking", "Sair" };

    SetTargetFPS(60);

    while (!WindowShouldClose()) {
        if (currentScreen == MENU) {
            // Controle de navegação no menu
            if (IsKeyPressed(KEY_DOWN)) selectedOption = (selectedOption + 1) % MAX_OPTIONS;
            if (IsKeyPressed(KEY_UP)) selectedOption = (selectedOption - 1 + MAX_OPTIONS) % MAX_OPTIONS;

            // Verifica se a opção foi selecionada com Enter apenas para Iniciar e Sair
            if (IsKeyPressed(KEY_ENTER)) {
                if (selectedOption == 0) { // Iniciar
                    currentScreen = JOGO;
                } else if (selectedOption == 3) { // Sair
                    CloseWindow();
                    return 0;
                }
            }

            // Desenho do menu dividido
            BeginDrawing();
                ClearBackground(RAYWHITE);

                // Divisão da tela
                DrawRectangle(0, 0, screenWidth / 2, screenHeight, LIGHTGRAY);
                DrawRectangle(screenWidth / 2, 0, screenWidth / 2, screenHeight, RAYWHITE);

                // Exibe o título do menu
                DrawText("Menu Principal", screenWidth / 4 - MeasureText("Menu Principal", 30) / 2, 50, 30, DARKBLUE);

                // Exibe as opções do menu na área esquerda
                for (int i = 0; i < MAX_OPTIONS; i++) {
                    Color color = (i == selectedOption) ? RED : DARKGRAY;
                    DrawText(menuOptions[i], screenWidth / 4 - MeasureText(menuOptions[i], 20) / 2, 150 + i * 40, 20, color);
                }

                // Exibe informações na área direita automaticamente para "Instruções" e "Ranking"
                if (selectedOption == 1) {  // Instruções
                    DrawText("Instruções", screenWidth * 3 / 4 - MeasureText("Instruções", 30) / 2, 50, 30, DARKBLUE);
                    DrawText("Use W-A-D para movimentar o personagem.", screenWidth / 2 + 20, 150, 17, DARKGRAY);
                    DrawText("Use as setas para disparar.", screenWidth / 2 + 20, 190, 17, DARKGRAY);
                } else if (selectedOption == 2) {  // Ranking
                    DrawText("Ranking", screenWidth * 3 / 4 - MeasureText("Ranking", 30) / 2, 50, 30, DARKBLUE);
                    DrawText("Veja as pontuações mais altas aqui!", screenWidth / 2 + 20, 150, 17, DARKGRAY);
                    DrawText("Ainda não há pontuações disponíveis.", screenWidth / 2 + 20, 190, 17, DARKGRAY);
                }

            EndDrawing();

        } else if (currentScreen == JOGO) {
            // Aqui iria a lógica do jogo em si
            // Volta ao menu principal ao pressionar ESC
            if (IsKeyPressed(KEY_ESCAPE)) {
                currentScreen = MENU;
            }
            
            BeginDrawing();
                ClearBackground(RAYWHITE);
                DrawText("Jogo em andamento...", screenWidth / 2 - MeasureText("Jogo em andamento...", 40) / 2, screenHeight / 2 - 20, 40, DARKBLUE);
                DrawText("Pressione ESC para voltar ao menu principal.", screenWidth / 2 - MeasureText("Pressione ESC para voltar ao menu principal.", 20) / 2, screenHeight / 2 + 30, 20, DARKGRAY);
            EndDrawing();
        }
    }

    CloseWindow();
    return 0;
}
